{"version":3,"sources":["contexts/globalContentContext.tsx","components/Header.tsx","components/Sider/SiderPane.tsx","components/Sider/Sider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalContentContext","createContext","state","text","fontSize","fontFamily","actions","setText","setFontSize","setFontFamily","GlobalContentsProvider","children","useState","value","Provider","Header","HeaderWrapper","HeaderTitle","styled","div","SiderPanelStyled","props","isActive","ButtonAreaStyled","SiderPane","setIsActive","onClick","previousState","CaretRightOutlined","rotate","style","margin","Sider","iconType","label","isGithubIconMouseOver","setIsGithubIconMouseOver","SideTabStyled","GithubFilled","window","open","onMouseEnter","onMouseLeave","color","transitionProperty","transitionDuration","transitionTimingFunction","AppWrapperDiv","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAEMA,EAAuBC,wBAAc,CACzCC,MAAO,CACLC,KAAM,GACNC,SAAU,GACVC,WAAY,IAEdC,QAAS,CACPC,QAAS,SAACJ,KACVK,YAAa,SAACJ,KACdK,cAAe,SAACJ,QAIdK,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBC,mBAAS,eADc,mBACxCT,EADwC,KAClCI,EADkC,OAEfK,mBAAS,MAFM,mBAExCR,EAFwC,KAE9BI,EAF8B,OAGXI,mBAAS,aAHE,mBAKzCC,EAAQ,CACZX,MAAO,CAAEC,OAAMC,WAAUC,WANoB,MAO7CC,QAAS,CAAEC,UAASC,cAAaC,cAPY,OAU/C,OACE,kBAACT,EAAqBc,SAAtB,CAA+BD,MAAOA,GACnCF,I,+fCxBA,IAAMI,EAAS,WACpB,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,2BAKAD,EAAgBE,IAAOC,IAAV,KASbF,EAAcC,IAAOC,IAAV,K,ipBCLjB,IAiBMC,EAAmBF,IAAOC,IAAV,KAEZ,SAACE,GAAD,OAAYA,EAAMC,SAAW,QAAU,SAgB3CC,EAAmBL,IAAOC,IAAV,KASPK,EA5CG,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,YAAaH,EAA+B,EAA/BA,SAKhC,OACE,kBAACF,EAAD,CAAkBE,SAAUA,GAC1B,kBAACC,EAAD,CAAkBD,SAAUA,EAAUI,QANhB,WACxBD,GAAY,SAACE,GAAD,OAAoBA,OAM5B,kBAACC,EAAA,EAAD,CACEC,OAAQP,EAAW,EAAI,IACvBQ,MAAO,CAAEC,OAAQ,Y,6YChB3B,IAgDeC,EAhDD,WAAO,IAAD,EACoBpB,mBAAS,CAAEqB,SAAU,GAAIC,MAAO,KADpD,gCAEctB,oBAAS,IAFvB,mBAEXU,EAFW,KAEDG,EAFC,OAGwCb,oBAAS,GAHjD,mBAGXuB,EAHW,KAGYC,EAHZ,KAuBlB,OACE,oCACE,kBAACC,EAAD,CAAef,SAAUA,GACvB,kBAAC,EAAD,CAAWA,SAAUA,EAAUG,YAAaA,IAC5C,kBAACa,EAAA,EAAD,CACEZ,QAtBkB,WACxBa,OAAOC,KAAP,qDAsBMC,aAAc,WACZL,GAAyB,IAE3BM,aAAc,WACZN,GAAyB,IAE3BN,MAAO,CACL1B,SAAU,OACVuC,MAAOR,EAAwB,OAAS,OACxCS,mBAAoB,QACpBC,mBAAoB,OACpBC,yBAA0B,oBAUhCT,EAAgBnB,IAAOC,IAAV,KAET,SAACE,GAAD,OAAYA,EAAMC,SAAW,QAAU,S,kRC1CjD,IAAMyB,EAAgB7B,IAAOC,IAAV,KAYJ6B,EAvBf,WACE,OACE,kBAAC,EAAD,KACE,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYE,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f5e5072.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\r\n\r\nconst GlobalContentContext = createContext({\r\n  state: {\r\n    text: \"\",\r\n    fontSize: \"\",\r\n    fontFamily: \"\",\r\n  },\r\n  actions: {\r\n    setText: (text: string): void => {},\r\n    setFontSize: (fontSize: string): void => {},\r\n    setFontFamily: (fontFamily: string): void => {},\r\n  },\r\n});\r\n\r\nconst GlobalContentsProvider = ({ children }) => {\r\n  const [text, setText] = useState(\"Sample Text\");\r\n  const [fontSize, setFontSize] = useState(\"40\");\r\n  const [fontFamily, setFontFamily] = useState(\"Helvetica\");\r\n\r\n  const value = {\r\n    state: { text, fontSize, fontFamily },\r\n    actions: { setText, setFontSize, setFontFamily },\r\n  };\r\n\r\n  return (\r\n    <GlobalContentContext.Provider value={value}>\r\n      {children}\r\n    </GlobalContentContext.Provider>\r\n  );\r\n};\r\n\r\nconst useGlobalContents = () => useContext(GlobalContentContext);\r\n\r\nexport { GlobalContentsProvider, useGlobalContents };\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <HeaderWrapper>\r\n      <HeaderTitle> REACT ART NO.1 </HeaderTitle>\r\n    </HeaderWrapper>\r\n  );\r\n};\r\n\r\nconst HeaderWrapper = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  right: 15px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: stretch;\r\n`;\r\n\r\nconst HeaderTitle = styled.div`\r\n  font-size: 1.5em;\r\n  font-weight: 500;\r\n  margin: 20px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition-property: color;\r\n  transition-duration: 0.5s;\r\n  transition-timing-function: ease-in-out;\r\n  &:hover {\r\n    color: darkslategray;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { CaretRightOutlined } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport { SiderPaneStyledProps } from \"./Sider\";\r\n\r\ninterface SiderPaneProps {\r\n  isActive?: boolean;\r\n  setIsActive?: any;\r\n}\r\n\r\n/**\r\n * @since 2020.08.30\r\n * @description Side Panel에 관련된 Toggle Button Component 입니다.\r\n * 클릭하면 사이드 패널의 크기가 줄어듭니다.\r\n */\r\nconst SiderPane = ({ setIsActive, isActive }: SiderPaneProps) => {\r\n  const onClickButtonArea = () => {\r\n    setIsActive((previousState) => !previousState);\r\n  };\r\n\r\n  return (\r\n    <SiderPanelStyled isActive={isActive}>\r\n      <ButtonAreaStyled isActive={isActive} onClick={onClickButtonArea}>\r\n        <CaretRightOutlined\r\n          rotate={isActive ? 0 : 180}\r\n          style={{ margin: \"3px\" }}\r\n        />\r\n      </ButtonAreaStyled>\r\n    </SiderPanelStyled>\r\n  );\r\n};\r\n\r\nconst SiderPanelStyled = styled.div<SiderPaneStyledProps>`\r\n  position: fixed;\r\n  left: ${(props) => (props.isActive ? \"-40px\" : \"0px\")};\r\n  top: 20%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  justify-content: center;\r\n  background-color: #393f4c;\r\n  border-radius: 5px;\r\n  width: 60px;\r\n  transition-property: left;\r\n  transition-timing-function: ease-in-out;\r\n  transition-duration: 0.5s;\r\n  height: 50px;\r\n  z-index: -1;\r\n`;\r\n\r\nconst ButtonAreaStyled = styled.div<SiderPaneStyledProps>`\r\n  width: 20px;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  /* background-color: #fff; */\r\n`;\r\n\r\nexport default SiderPane;\r\n","import React, { useState } from \"react\";\r\nimport { GithubFilled } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport SiderPane from \"./SiderPane\";\r\n\r\nexport interface SiderPaneStyledProps {\r\n  isActive?: boolean;\r\n}\r\n\r\nconst Sider = () => {\r\n  const [currentMenu, setCurrentMenu] = useState({ iconType: \"\", label: \"\" });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isGithubIconMouseOver, setIsGithubIconMouseOver] = useState(false);\r\n  //   const [menus, setMenus] = useState([]);\r\n\r\n  const handleGithubClick = () => {\r\n    window.open(`https://github.com/Mordiumaco/react-canvas-work1`);\r\n  };\r\n\r\n  //   const handleSideToggle = (menu) => {\r\n  //     const { isActive, curMenu } = this.state;\r\n\r\n  //     if (curMenu.label === \"\" || !isActive) {\r\n  //       this.setState({ isActive: !isActive, curMenu: menu });\r\n  //       return;\r\n  //     }\r\n\r\n  //     isActive && menu.label === curMenu.label\r\n  //       ? this.setState({ isActive: !isActive })\r\n  //       : this.setState({ curMenu: menu });\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <SideTabStyled isActive={isActive}>\r\n        <SiderPane isActive={isActive} setIsActive={setIsActive} />\r\n        <GithubFilled\r\n          onClick={handleGithubClick}\r\n          onMouseEnter={() => {\r\n            setIsGithubIconMouseOver(true);\r\n          }}\r\n          onMouseLeave={() => {\r\n            setIsGithubIconMouseOver(false);\r\n          }}\r\n          style={{\r\n            fontSize: \"20px\",\r\n            color: isGithubIconMouseOver ? \"#000\" : \"#eee\",\r\n            transitionProperty: \"color\",\r\n            transitionDuration: \"0.5s\",\r\n            transitionTimingFunction: \"ease-in-out\",\r\n          }}\r\n        />\r\n      </SideTabStyled>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sider;\r\n\r\nconst SideTabStyled = styled.div<SiderPaneStyledProps>`\r\n  position: fixed;\r\n  left: ${(props) => (props.isActive ? \"-40px\" : \"0px\")};\r\n  top: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #393f4c;\r\n  transition-property: left;\r\n  transition-timing-function: ease-in-out;\r\n  transition-duration: 0.5s;\r\n  width: 40px;\r\n  height: 100%;\r\n  z-index: 100;\r\n`;\r\n","import React from \"react\";\r\nimport { GlobalContentsProvider } from \"./contexts/globalContentContext\";\r\nimport { Header } from \"./components/Header\";\r\nimport styled from \"styled-components\";\r\n// import \"./assets/scss/reset.scss\";\r\nimport \"./assets/scss/common.scss\";\r\nimport Sider from \"./components/Sider/Sider\";\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalContentsProvider>\r\n      <AppWrapperDiv>\r\n        <Header />\r\n        <Sider />\r\n      </AppWrapperDiv>\r\n    </GlobalContentsProvider>\r\n  );\r\n}\r\n\r\nconst AppWrapperDiv = styled.div`\r\n  min-width: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: 100;\r\n  text-align: center;\r\n  background: #29293d;\r\n  height: 100%;\r\n`;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}